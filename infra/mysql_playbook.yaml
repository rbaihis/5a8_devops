---
- name: Manage MySQL Docker Compose setup
  hosts: prodVm
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Ensure Python 3 usage
    compose_dir: ~/mysql_docker_setup  
    compose_file_path: "{{ compose_dir }}/docker-compose.yml"  
    db_name: timesheet-devops-db
    db_user: seif
    db_password: "openstack"  
    root_password: ""  
    mysql_container_name: mysql

  tasks:
    - name: Install pip3 if not present (Ubuntu/Debian)
      apt:
        name: python3-pip
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install pip3 if not present (RHEL/CentOS)
      yum:
        name: python3-pip
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Create Docker Compose directory
      file:
        path: "{{ compose_dir }}"
        state: directory
        mode: '0755'
    
    - name: Check if Docker network "mysql-network" exists
      command: docker network ls --filter name=mysql-network --format "{{ '{{' }}.Name{{ '}}' }}"
      register: network_check
      changed_when: false

    - name: Create Docker network "mysql-network" if it does not exist
      command: docker network create mysql-network
      when: network_check.stdout == ''

    - name: Create Docker Compose file
      copy:
        dest: "{{ compose_file_path }}"
        content: |
          services:
            mysql:
              image: mysql:latest
              container_name: mysql
              environment:
                MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
                MYSQL_ROOT_PASSWORD: "{{ root_password }}"
                MYSQL_DATABASE: "{{ db_name }}"
                MYSQL_USER: "{{ db_user }}"
                MYSQL_PASSWORD: "{{ db_password }}"
              ports:
                - "3306:3306"
              volumes:
                - mysql_data:/var/lib/mysql
              networks:
                - mysql-network
          volumes:
            mysql_data: {}
          networks:
            mysql-network:
              external: true

    - name: Check if MySQL container is already running
      command: docker compose ps -q mysql
      args:
        chdir: "{{ compose_dir }}"
      register: compose_status
      changed_when: false

    - name: Ensure Docker Compose is up
      command: docker compose up -d
      args:
        chdir: "{{ compose_dir }}"
      when: compose_status.stdout == ""

    - name: Wait for MySQL to be ready
      wait_for:
        port: 3306
        timeout: 60 # Use the increased wait time
        state: started

    - name: Create the database if it does not exist
      shell: |
        docker exec {{ mysql_container_name }} mysql mysql -u {{ db_user }} -p{{ db_password }} -e "CREATE DATABASE {{ db_name }}"
      when: db_check.rc != 0
      
    # - name: Ensure MySQL database is created inside the container if not exists
    #   command: docker exec mysql mysql -u{{ db_user }} -p{{ db_password }} -e "CREATE DATABASE IF NOT EXISTS {{ db_name }};"
    #   register: db_creation_status
    #   changed_when: "'Database changed' in db_creation_status.stdout"

    - name: Output the database creation status
      debug:
        msg: "Database '{{ db_name }}' has been ensured to exist."
