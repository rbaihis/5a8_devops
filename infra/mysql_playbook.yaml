---
- name: Manage MySQL Docker Compose setup
  hosts: prodVm
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Ensure Python 3 usage
    compose_dir: ~/mysql_docker_setup  
    compose_file_path: "{{ compose_dir }}/docker-compose.yml"  
    prometheus_dir: "{{ compose_dir }}/prom_conf"  
    prometheus_file_path: "{{ prometheus_dir }}/prom_conf/prometheus.yml"

    db_name: timesheet-devops-db
    db_user: seif
    db_password: "openstack"  
    root_password: ""  
    mysql_container_name: mysql

  tasks:
    - name: Install pip3 if not present (Ubuntu/Debian)
      apt:
        name: python3-pip
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install pip3 if not present (RHEL/CentOS)
      yum:
        name: python3-pip
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Create Docker Compose directory
      file:
        path: "{{ compose_dir }}"
        state: directory
        mode: '0755'

    - name: Create prom_conf  directory
      file:
        path: "{{ prometheus_dir }}"
        state: directory
        mode: '0755'
    
    - name: Copy prom_conf/prometheus.yml to destination only if it does not exist
      ansible.builtin.copy:
        src: prom_conf/prometheus.yml
        dest: "{{ prometheus_file_path }}"
        force: no 

    - name: Read the contents of prometheus.yml
      ansible.builtin.slurp:
        src: "{{ prometheus_file_path }}"
      register: prometheus_file

    - name: Decode prometheus.yaml content
      set_fact:
        prometheus_content: "{{ prometheus_file.content | b64decode }}"

    - name: Check if target exists
      set_fact:
        target_exists: "{{ prometheus_content is search(\"- 'timesheet:8079'\") }}"

    - name: Add timesheet-devops-service job if both job_name and target are missing
      ansible.builtin.blockinfile:
        path: "{{ prometheus_file_path }}"
        marker: "#--------------timesheet---------------------------------"
        block: |

          - job_name: 'timesheet-devops-service'
            metrics_path: '/timesheet-devops/actuator/prometheus'
            static_configs:
            - targets:
              - '192.168.43.10:8079'
        insertafter: EOF
      when: not target_exists

    
    - name: Check if Docker network "mysql-network" exists
      command: docker network ls --filter name=mysql-network --format "{{ '{{' }}.Name{{ '}}' }}"
      register: network_check
      changed_when: false

    - name: Create Docker network "mysql-network" if it does not exist
      command: docker network create mysql-network
      when: network_check.stdout == ''

    - name: Create Docker Compose file
      copy:
        dest: "{{ compose_file_path }}"
        content: |
          services:
            mysql:
              image: mysql:latest
              container_name: mysql
              environment:
                MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
                MYSQL_ROOT_PASSWORD: "{{ root_password }}"
                MYSQL_DATABASE: "{{ db_name }}"
                MYSQL_USER: "{{ db_user }}"
                MYSQL_PASSWORD: "{{ db_password }}"
              ports:
                - "3306:3306"
              volumes:
                - mysql_data:/var/lib/mysql
              networks:
                - mysql-network
          #---------------------monitoring---------------------------------
            prometehus:
              container_name: prometehus
              image: prom/prometheus
              ports:
                - "9090:9090"
              volumes:
                - prom:/prometheus
                - "./{{ prometheus_file_path }}":/etc/prometheus/prometheus.yml
              command:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.path=/prometheus'
                - '--web.console.libraries=/usr/share/prometheus/console_libraries'
                - '--web.console.templates=/usr/share/prometheus/consoles'
              networks:
                - mysql-network
              restart: unless-stopped

            grafana:
              container_name: grafana
              image: grafana/grafana
              environment:
                - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
                - GF_AUTH_ANONYMOUS_ENABLED=true
                - GF_AUTH_BASIC_ENABLED=false
                - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
                - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
                - GF_DATASOURCES__DEFAULT__TYPE=prometheus
                - GF_DATASOURCES__DEFAULT__URL=http://promethus:9090
                - GF_DATASOURCES__DEFAULT__ACCESS=proxy
              ports:
                - "3000:3000"
              depends_on:
                prometehus:
                  condition: service_started
              volumes:
                - graph:/var/lib/grafana
              networks:
                - mysql-network
              restart: unless-stopped


          #----------
          volumes:
            mysql_data: 
            prom:
            graph:
          networks:
            mysql-network:
              external: true

    - name: Check if MySQL container is already running
      command: docker compose ps -q mysql
      args:
        chdir: "{{ compose_dir }}"
      register: compose_status
      changed_when: false
      
    - name: Ensure Docker Compose is up
      command: docker compose up -d
      args:
        chdir: "{{ compose_dir }}"
      when: compose_status.stdout == ""

    - name: Wait for MySQL to be ready
      wait_for:
        port: 3306
        timeout: 60 # Use the increased wait time
        state: started

    - name: Check if the database exists
      shell: |
        docker exec {{ mysql_container_name }} mysql -u {{ db_user }} -p{{ db_password }} -e "USE {{ db_name }}"
      register: db_check
      ignore_errors: yes
    
    - name: Create the database if it does not exist
      shell: |
        docker exec {{ mysql_container_name }} mysql mysql -u {{ db_user }} -p{{ db_password }} -e "CREATE DATABASE {{ db_name }}"
      when: db_check.rc != 0
      
    # - name: Ensure MySQL database is created inside the container if not exists
    #   command: docker exec mysql mysql -u{{ db_user }} -p{{ db_password }} -e "CREATE DATABASE IF NOT EXISTS {{ db_name }};"
    #   register: db_creation_status
    #   changed_when: "'Database changed' in db_creation_status.stdout"

    - name: Output the database creation status
      debug:
        msg: "Database '{{ db_name }}' has been ensured to exist."
